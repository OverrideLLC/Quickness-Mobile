[versions]
accompanistSystemuicontroller = "0.31.3-beta"
agp = "8.10.0"
android-compileSdk = "35"
android-minSdk = "30"
android-targetSdk = "35"
androidx-activityCompose = "1.10.1"
androidx-lifecycle = "2.8.4"
androidx-room = "2.7.1"
androidx-sqliteBundled = "2.5.0"
compose-multiplatform = "1.8.0"
coreSplashscreen = "1.0.1"
firebase-bom = "33.13.0"
googleService = "4.4.2"
koin = "4.0.0"
koinCompose = "4.0.0"
kotlin = "2.2.0-Beta2"
kotlinxCoroutinesCore = "1.10.1"
kotlinxDatetime = "0.6.2"
ktor = "3.1.1"
krypto = "3.0.0"
markdown = "0.7.3"
navigationCompose = "2.8.0-alpha10"
qrKit = "3.0.6"
uiGraphicsAndroid = "1.8.0"
ksp = "2.2.0-Beta2-2.0.1"
dataStore = "1.1.3"
buildConfig = "5.3.5"
moko-permissions = "0.18.1"
biometric = "1.4.0-alpha03"
workRuntimeKtx = "2.10.1"
runner = "1.6.2"
coreVersion = "1.6.1"
junit = "1.2.1"
coil = "3.1.0"
generativeai = "0.9.0"
generativeaiGoogleWasmJs = "0.9.0-1.0.1-wasm"

[libraries]
accompanist-systemuicontroller = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanistSystemuicontroller" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-core-splashscreen = { module = "androidx.core:core-splashscreen", version.ref = "coreSplashscreen" }
androidx-biometric = { module = "androidx.biometric:biometric", version.ref = "biometric" }
androidx-lifecycle-runtime-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
androidx-lifecycle-viewmodel = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-viewmodel", version.ref = "androidx-lifecycle" }
androidx-room-compailer = { group = "androidx.room", name = "room-compiler", version.ref = "androidx-room" }
androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "androidx-room" }
androidx-sqliteBundled = { group = "androidx.sqlite", name = "sqlite-bundled", version.ref = "androidx-sqliteBundled" }
androidx-ui-graphics-android = { group = "androidx.compose.ui", name = "ui-graphics-android", version.ref = "uiGraphicsAndroid" }
androidx-work-runtime-ktx = { module = "androidx.work:work-runtime-ktx", version.ref = "workRuntimeKtx" }
firebase-analytics = { module = "com.google.firebase:firebase-analytics" }
firebase-auth = { module = "com.google.firebase:firebase-auth" }
firebase-bom = { module = "com.google.firebase:firebase-bom", version.ref = "firebase-bom" }
firebase-firestore = { module = "com.google.firebase:firebase-firestore-ktx" }
koin-android = { group = "io.insert-koin", name = "koin-android" }
koin-bom = { group = "io.insert-koin", name = "koin-bom", version.ref = "koin" }
koin-compose = { group = "io.insert-koin", name = "koin-compose" }
koin-compose-viewModel = { group = "io.insert-koin", name = "koin-compose-viewmodel", version.ref = "koinCompose" }
koin-core = { group = "io.insert-koin", name = "koin-core" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutinesCore" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
krypto = { module = "com.soywiz.korlibs.krypto:krypto", version.ref = "krypto" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-loggin = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
markdown = { module = "org.jetbrains:markdown", version.ref = "markdown" }
navigation-compose = { module = "org.jetbrains.androidx.navigation:navigation-compose", version.ref = "navigationCompose" }
qr-kit = { module = "network.chaintech:qr-kit", version.ref = "qrKit" }
datastore-preference = { module = "androidx.datastore:datastore-preferences", version.ref = "dataStore" }
moko-permissions = { module = "dev.icerock.moko:permissions", version.ref = "moko-permissions" }
moko-permissions-compose = { module = "dev.icerock.moko:permissions-compose", version.ref = "moko-permissions" }
kotlin-stdlib = { group = "org.jetbrains.kotlin", name = "kotlin-stdlib", version.ref = "kotlin" }
kotlin-test = { group = "org.jetbrains.kotlin", name = "kotlin-test", version.ref = "kotlin" }
androidx-runner = { group = "androidx.test", name = "runner", version.ref = "runner" }
androidx-core = { group = "androidx.test", name = "core", version.ref = "coreVersion" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junit" }
coil-compose = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }
coil-network = { module = "io.coil-kt.coil3:coil-network-ktor3", version.ref = "coil" }
generativeai = { module = "com.google.ai.client.generativeai:generativeai", version.ref = "generativeai" }
generativeai-google-wasm-js = { module = "dev.shreyaspatil.generativeai:generativeai-google", version.ref = "generativeaiGoogleWasmJs" }

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
androidxRoom = { id = "androidx.room", version.ref = "androidx-room" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }
googleService = { id = "com.google.gms.google-services", version.ref = "googleService" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinxSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
gradelBuildConfig = { id = "com.github.gmazzo.buildconfig", version.ref = "buildConfig"}
androidKotlinMultiplatformLibrary = { id = "com.android.kotlin.multiplatform.library", version.ref = "agp" }